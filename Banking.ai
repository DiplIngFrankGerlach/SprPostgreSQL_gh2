Import
{
  "Strings.ad",
  "System.ad",
  "SQLWurzel.ad",
  "PostgreSQL.ad",
  "Banking.ad"
}

Bank::Bank()
{
   var String_16 vzk;
   vzk.append("dbname=frank user=frank password=XXX host=di-fg.de");
   if(pgc.connect(vzk) != 1)
   { 
     pfc.fstr("connect failed").pr();
   }
}

void Bank::transferMoney(int fromAccount, int toAccount, &String_16 amount,&String_16 description)
{
   if( this.checkSQLParam(amount) != 1)
   { 
     pfc.fstr("bad character in SQL Parameter").pr();
     return;
   }
   if( this.checkSQLParam(description) != 1)
   { 
     pfc.fstr("bad character in SQL Parameter").pr();
     return;
   }


   if(pgc.executeCommand("BEGIN") != 1) 
   { 
     pfc.fstr("BEGIN transaction failed").pr();
     return ; 
   }

   var String_16 selectFromAccount("select account_nr from bank_accounts where account_nr=");
   selectFromAccount.append(fromAccount);
   selectFromAccount.append(" for update;");


   if(pgc.startQuery(selectFromAccount) != 1) 
   { 
     pfc.fstr("select from failed").pr();
     return ; 
   }

   

   var String_16 selectToAccount("select account_nr from bank_accounts where account_nr=");
   selectToAccount.append(toAccount);
   selectToAccount.append(" for update;");

   if(pgc.startQuery(selectToAccount) != 1) 
   { 
     pfc.fstr("select to failed").pr();
     return ; 
   }


   var String_16 insertCommand;
   insertCommand.assign("insert into transactions(fromAccount,toAccount,timestamp,amount, description) values(");
   insertCommand.append(fromAccount);
   insertCommand.append(",");
   insertCommand.append(toAccount);
   insertCommand.append(",");
   insertCommand.append("'2024-6-2 19:19:19'");//FAKE
   insertCommand.append(",'");

   insertCommand.append(amount);
   insertCommand.append("','");
   insertCommand.append(description);
   insertCommand.append("');");

   if(pgc.executeCommand(insertCommand) != 1) 
   { 
     pfc.fstr("insert transaction failed").pr();
     return ; 
   }

   if(pgc.executeCommand("COMMIT") != 1)
   { 
     pfc.fstr("COMMIT transaction failed").pr();
     return ; 
   }
}


void Bank::readTransactions()
{
   var String_16 query("select a.firstname, a.lastname, amount,b.firstname,b.lastname from transactions as t, bank_accounts as a, bank_accounts as b where t.fromAccount = a.account_nr and t.toAccount=b.account_nr;");


   var char qbuf[1024];
   query.toCharArray(qbuf);
   if(pgc.startQuery(qbuf) == 1)
   {
      while(pgc.select() == 1)
      {
         var int id = pgc.getInt(0);
         var String_16 fnFrom; 
         pgc.getString(0,fnFrom);
         var String_16 lnFrom; 
         pgc.getString(1,lnFrom);
         var String_16 amount; 
         pgc.getString(2,amount);
         var String_16 fnTo; 
         pgc.getString(3,fnTo);
         var String_16 lnTo; 
         pgc.getString(4,lnTo);
         pfc.fstr("$ $ $ $ $ ").sa(fnFrom).sa(lnFrom).sa(amount).sa(fnTo).sa(lnTo).pr();
      }
   }

}

/* make sure an SQL Parameter does not allow for an SQL insertion attack */
int Bank::checkSQLParam(&String_16 parameter)
{
   for(var int i=0; i < parameter.length(); i++)
   {
      switch(parameter.getAt(i))
      {
         case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i': case 'j': case 'k': case 'l': case 'm':
         case 'n': case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
         case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G': case 'H': case 'I': case 'J': case 'K': case 'L': case 'M':
         case 'N': case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
         case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': 
         case '_': case ',': case '-': case '/': case '@': case '.': case ' ':
         { };break;

         default: {return -1;};
      }
   }
   return 1;
}
